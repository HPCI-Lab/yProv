tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

metadata:
  template_version: "1.0.1"
  template_name: yProv
  display_name: Deploy yProv service
  # icon: images/yprov.png
  web: https://github.com/HPCI-Lab/yProv
  tag: beta
  parents:
    - kubernetes.yaml
  tabs:
    yProv: .*

description: TOSCA template for launching yProv service on top of a Kubernetes Virtual Cluster.

topology_template:

  inputs:

    neo4j_user:
      type: string
      description: Neo4j username
      default: neo4j
    neo4j_password:
      type: string
      description: Neo4j password
      default: password
    neo4j_license:
      type: string
      description: Neo4j license type
      default: eval
    neo4j_plugins:
      type: string
      description: neo4j plugins to be enabled
      default: '[apoc, graph-data-science]'
    storage_dimension:
      type: string
      description: Neo4j storage capacity
      default: 100Mi

  node_templates:

    yprov:
      type: tosca.nodes.indigo.Helm.Chart
      capabilities:
        endpoint:
          properties:
            ports:
              port_neo4j:
                protocol: tcp
                source: 7687
      properties:
        namespace: yprov
        chart_url: "https://github.com/HPCI-Lab/yProv/raw/yprov_v2/cloud/yProv.tgz"
        name: yProv
        values_file:
          concat:
            - |-
                db:
                  env:
                    auth:
                      name: NEO4J_AUTH
                    license:
                      name: NEO4J_ACCEPT_LICENSE_AGREEMENT
                    plugins:
                      name: NEO4J_PLUGINS
                      value: |
                        '
            - get_input: neo4j_plugins
            - |-
                '
        values:
          web.env.user.value: { get_input: neo4j_user }
          web.env.password.value: { get_input: neo4j_password }
          db.env.auth.value: { concat: [ get_input: neo4j_user, '/', get_input: neo4j_password ] }
          db.env.license.value: { get_input: neo4j_license }
          storage.neo4j.data.resources.requirements.storage: { get_input: storage_dimension }
          storage.neo4j.logs.resources.requirements.storage: { get_input: storage_dimension }
          storage.yprov.resources.requirements.storage: { get_input: storage_dimension }
      requirements:
        - host: lrms_front_end

    yprov_ingress:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: yprov-ingress
            namespace: yprov
          spec:
            ingressClassName: nginx
            rules:
            - http:
                paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: web
                      port:
                        number: 3000
            - http:
                paths:
                - path: /browser
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: db
                      port:
                        number: 7474
      requirements:
        - host: lrms_front_end
        - dependency: yprov


  outputs:
    neo4j_browser_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/browser' ] }
    neo4j_db_endpoint:
      value: { concat: [ 'neo4j://', get_attribute: [ front, public_address, 0 ] ] }
    yprov_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/' ] }